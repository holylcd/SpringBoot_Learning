# 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出
status = debug
# 
dest = err
# 
name = PropertiesConfig
 
 
# 指定日志文件的位置和文件名称,以便记录多份日志时,直接引用
property.filename = target/rolling/rollingtest.log
 
# 级别过滤（过滤日志记录）
filter.threshold.type = ThresholdFilter
# 只记录debug级别以上的日志，大小写无关：(ALL<)TRACE<DEBUG<INFO<WARN<ERROR<FATAL(<OFF)
filter.threshold.level = info
 
 
# 控制台类型的日志输出源
appender.console.type = Console
# 输出源的名称
appender.console.name = STDOUT
# 输出布局类型
appender.console.layout.type = PatternLayout
# 输出模板
appender.console.layout.pattern = %d{dd/HH:mm:ss} %t %-5level|%m%n
appender.console.filter.threshold.type = ThresholdFilter
appender.console.filter.threshold.level = info
 
 
# 文件滚动记录类型的日志输出源
appender.rolling.type = RollingFile
# 指定当前滚动输出源的名称
appender.rolling.name = RollingFile
# 指定当前日志文件的位置和文件名称,可以单独指定,也可以直接引用之前定义过得property.filename参数
appender.rolling.fileName = ${filename}
# 指定当发生Rolling时，文件的转移和重命名规则
appender.rolling.filePattern = target/rolling2/test1-%d{MM-dd-yy}-%i.log.gz
# 滚动记录输出源布局类型
appender.rolling.layout.type = PatternLayout
# 滚动记录输出模板
appender.rolling.layout.pattern = %d{dd/HH:mm:ss} %t %-5level|%m%n
# 指定记录文件的封存策略，该策略主要是完成周期性的日志文件封存工作
appender.rolling.policies.type = Policies
# 基于时间的触发策略（TriggeringPolicy）
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
# 如果filePattern中配置的文件重命名规则是target/rolling2/test1-%d{yyyy-MM-dd HH-mm}-%i，最小的时间粒度是mm，即分钟，TimeBasedTriggeringPolicy指定的size是1，结合起来就是每2分钟生成一个新文件。如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每2个小时生成一个文件。
appender.rolling.policies.time.interval = 1
# 是否对封存时间进行调制。若modulate=true，则封存时间将以0点为边界进行偏移计算。比如，modulate=true，interval=4hours，那么假设上次封存日志的时间为03:00，则下次封存日志的时间为04:00，之后的封存时间依次为08:00，12:00，16:00
appender.rolling.policies.time.modulate = true
# 基于日志文件体积的触发策略。
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
# 当日志文件体积大于size指定的值时，触发Rolling
appender.rolling.policies.size.size=100MB
# 文件封存的覆盖策略（RolloverStrategy）
appender.rolling.strategy.type = DefaultRolloverStrategy
# 生成分割（封存）文件的个数，默认为5(-1,-2,-3,-4,-5)
appender.rolling.strategy.max = 5
 
 
# 记录器名称
Logger.rolling.name = com.example1.my.app
# 设置打印级别（日志级别）
Logger.rolling.level = info
# 是否向上级logger传递打印信息
Logger.rolling.additivity = false
# 关联名称为RollingFile的输出源（appender）
Logger.rolling.appenderRef.rolling.ref = RollingFile
 
 
# 根记录器，所有记录器的父辈
rootLogger.level = info
# 关联名称为STDOUT的输出源（appender）
rootLogger.appenderRef.stdout.ref = STDOUT